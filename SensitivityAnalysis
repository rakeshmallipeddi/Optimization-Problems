<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sensitivity Analysis - Timed Challenge</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #43cea2 0%, #185a9d 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
            overflow: hidden;
        }

        /* Start Screen */
        .start-screen {
            text-align: center;
            padding: 60px 40px;
            background: linear-gradient(135deg, #43cea2, #185a9d);
            color: white;
        }

        .start-screen h1 {
            font-size: 3rem;
            margin-bottom: 20px;
        }

        .start-screen p {
            font-size: 1.3rem;
            margin-bottom: 40px;
            opacity: 0.95;
        }

        .name-input-box {
            background: white;
            padding: 40px;
            border-radius: 20px;
            max-width: 500px;
            margin: 0 auto;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        }

        .name-input-box h2 {
            color: #185a9d;
            margin-bottom: 20px;
        }

        .name-input-box input {
            width: 100%;
            padding: 15px;
            font-size: 1.2rem;
            border: 3px solid #ddd;
            border-radius: 10px;
            margin-bottom: 25px;
            transition: border-color 0.3s;
        }

        .name-input-box input:focus {
            outline: none;
            border-color: #43cea2;
        }

        .time-selector {
            margin-bottom: 25px;
        }

        .time-selector label {
            display: block;
            color: #555;
            margin-bottom: 10px;
            font-weight: 600;
        }

        .time-options {
            display: flex;
            gap: 15px;
            justify-content: center;
        }

        .time-option {
            flex: 1;
            padding: 15px;
            border: 3px solid #ddd;
            border-radius: 10px;
            cursor: pointer;
            text-align: center;
            transition: all 0.3s;
            background: white;
        }

        .time-option:hover {
            border-color: #43cea2;
            transform: translateY(-2px);
        }

        .time-option.selected {
            border-color: #43cea2;
            background: #e8f5e9;
        }

        .time-option input[type="radio"] {
            display: none;
        }

        .time-option .time-value {
            font-size: 1.5rem;
            font-weight: bold;
            color: #185a9d;
        }

        .time-option .time-label {
            font-size: 0.9rem;
            color: #666;
        }

        .start-btn {
            background: linear-gradient(135deg, #43cea2, #185a9d);
            color: white;
            border: none;
            padding: 18px 50px;
            border-radius: 30px;
            font-size: 1.3rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            width: 100%;
        }

        .start-btn:hover:not(:disabled) {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.2);
        }

        .start-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        /* Timer Display */
        .timer-bar {
            background: #185a9d;
            color: white;
            padding: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 1.2rem;
            font-weight: 600;
        }

        .timer-bar.warning {
            background: #ff9800;
            animation: pulse 1s infinite;
        }

        .timer-bar.danger {
            background: #f44336;
            animation: pulse 0.5s infinite;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.8; }
        }

        .timer-display {
            font-size: 2rem;
            font-weight: bold;
        }

        /* Main Content */
        .header {
            background: linear-gradient(135deg, #43cea2, #185a9d);
            color: white;
            padding: 30px 40px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .header-left h1 {
            font-size: 2rem;
            margin-bottom: 5px;
        }

        .player-info {
            text-align: right;
        }

        .player-name {
            font-size: 1.5rem;
            font-weight: bold;
        }

        .player-score {
            font-size: 1.2rem;
            opacity: 0.9;
        }

        .nav-tabs {
            display: flex;
            background: #f8f9fa;
            border-bottom: 2px solid #ddd;
        }

        .tab {
            flex: 1;
            padding: 20px;
            text-align: center;
            cursor: pointer;
            border: none;
            background: transparent;
            font-size: 1.1rem;
            font-weight: 600;
            color: #666;
            transition: all 0.3s ease;
        }

        .tab:hover {
            background: #e9ecef;
        }

        .tab.active {
            background: white;
            color: #185a9d;
            border-bottom: 3px solid #43cea2;
        }

        .content {
            padding: 40px;
        }

        .scenario {
            display: none;
        }

        .scenario.active {
            display: block;
            animation: fadeIn 0.5s ease;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .scenario-header {
            background: #f8f9fa;
            padding: 25px;
            border-radius: 12px;
            margin-bottom: 30px;
            border-left: 5px solid #43cea2;
        }

        .scenario-header h2 {
            color: #185a9d;
            margin-bottom: 15px;
            font-size: 1.8rem;
        }

        .scenario-header p {
            color: #555;
            line-height: 1.6;
            font-size: 1.05rem;
        }

        .solver-output {
            background: #fff9e6;
            padding: 25px;
            border-radius: 12px;
            margin: 25px 0;
            border: 2px solid #ffd54f;
        }

        .solver-output h3 {
            color: #e65100;
            margin-bottom: 15px;
            font-size: 1.3rem;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
            background: white;
        }

        th, td {
            padding: 12px;
            text-align: left;
            border: 1px solid #ddd;
        }

        th {
            background: #185a9d;
            color: white;
            font-weight: 600;
        }

        tr:nth-child(even) {
            background: #f8f9fa;
        }

        .question-section {
            background: #e3f2fd;
            padding: 25px;
            border-radius: 12px;
            margin: 25px 0;
            border-left: 5px solid #2196f3;
        }

        .question {
            margin: 25px 0;
        }

        .question-text {
            font-size: 1.1rem;
            font-weight: 600;
            color: #333;
            margin-bottom: 15px;
        }

        .input-group {
            margin: 15px 0;
        }

        .input-group label {
            display: block;
            margin-bottom: 8px;
            color: #555;
            font-weight: 500;
        }

        .input-group input[type="text"],
        .input-group input[type="number"],
        .input-group textarea {
            width: 100%;
            padding: 12px;
            border: 2px solid #ddd;
            border-radius: 8px;
            font-size: 1rem;
            font-family: 'Courier New', monospace;
            transition: border-color 0.3s;
        }

        .input-group input:focus,
        .input-group textarea:focus {
            outline: none;
            border-color: #43cea2;
        }

        .input-group input.correct {
            border-color: #4caf50;
            background: #e8f5e9;
        }

        .input-group input.incorrect {
            border-color: #f44336;
            background: #ffebee;
        }

        .radio-group {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .radio-option {
            display: flex;
            align-items: center;
            padding: 15px;
            background: white;
            border: 2px solid #ddd;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .radio-option:hover {
            background: #f8f9fa;
            border-color: #43cea2;
        }

        .radio-option input[type="radio"] {
            margin-right: 12px;
            width: 20px;
            height: 20px;
            cursor: pointer;
        }

        .radio-option label {
            cursor: pointer;
            font-size: 1rem;
            color: #333;
        }

        .check-btn {
            background: linear-gradient(135deg, #43cea2, #185a9d);
            color: white;
            border: none;
            padding: 15px 40px;
            border-radius: 30px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            margin-top: 20px;
            transition: all 0.3s ease;
        }

        .check-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.2);
        }

        .feedback {
            margin-top: 20px;
            padding: 20px;
            border-radius: 10px;
            display: none;
        }

        .feedback.show {
            display: block;
            animation: fadeIn 0.5s ease;
        }

        .feedback.correct {
            background: #e8f5e9;
            border-left: 5px solid #4caf50;
            color: #2e7d32;
        }

        .feedback.incorrect {
            background: #ffebee;
            border-left: 5px solid #f44336;
            color: #c62828;
        }

        .feedback.partial {
            background: #fff9e6;
            border-left: 5px solid #ff9800;
            color: #e65100;
        }

        .feedback h4 {
            margin-bottom: 10px;
            font-size: 1.2rem;
        }

        /* Leaderboard */
        .leaderboard-screen {
            padding: 40px;
        }

        .leaderboard-header {
            text-align: center;
            margin-bottom: 40px;
        }

        .leaderboard-header h1 {
            color: #185a9d;
            font-size: 3rem;
            margin-bottom: 10px;
        }

        .leaderboard-header p {
            color: #666;
            font-size: 1.2rem;
        }

        .leaderboard-table {
            background: white;
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 5px 20px rgba(0,0,0,0.1);
        }

        .leaderboard-table table {
            margin: 0;
        }

        .leaderboard-table th {
            background: linear-gradient(135deg, #43cea2, #185a9d);
            padding: 20px;
            font-size: 1.1rem;
        }

        .leaderboard-table td {
            padding: 20px;
            font-size: 1.1rem;
        }

        .rank-cell {
            font-weight: bold;
            font-size: 1.3rem;
        }

        .rank-1 {
            color: #ffd700;
        }

        .rank-2 {
            color: #c0c0c0;
        }

        .rank-3 {
            color: #cd7f32;
        }

        .rank-medal {
            font-size: 2rem;
            margin-right: 10px;
        }

        .current-player {
            background: #e8f5e9 !important;
            font-weight: bold;
        }

        .restart-btn {
            background: linear-gradient(135deg, #43cea2, #185a9d);
            color: white;
            border: none;
            padding: 15px 40px;
            border-radius: 30px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            margin-top: 30px;
            display: block;
            margin-left: auto;
            margin-right: auto;
            transition: all 0.3s ease;
        }

        .restart-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.2);
        }

        .hidden {
            display: none;
        }

        .key-concept {
            background: #e8f5e9;
            padding: 20px;
            border-radius: 10px;
            margin: 20px 0;
            border-left: 5px solid #4caf50;
        }

        .key-concept h4 {
            color: #2e7d32;
            margin-bottom: 10px;
        }

        .key-concept ul {
            margin: 10px 0;
            padding-left: 25px;
        }

        .key-concept li {
            margin: 8px 0;
            color: #1b5e20;
            line-height: 1.6;
        }

        @media (max-width: 768px) {
            .start-screen h1 {
                font-size: 2rem;
            }

            .time-options {
                flex-direction: column;
            }

            .header {
                flex-direction: column;
                text-align: center;
            }

            .player-info {
                text-align: center;
                margin-top: 15px;
            }

            .nav-tabs {
                flex-direction: column;
            }

            table {
                font-size: 0.85rem;
            }

            th, td {
                padding: 8px;
            }
        }
    </style>
</head>
<body>
    <!-- Start Screen -->
    <div id="startScreen" class="container">
        <div class="start-screen">
            <h1>🏆 Sensitivity Analysis Challenge</h1>
            <p>Test your skills and compete with your classmates!</p>
            
            <div class="name-input-box">
                <h2>Enter Your Information</h2>
                <input type="text" id="playerName" placeholder="Enter your name" maxlength="30">
                
                <div class="time-selector">
                    <label>Select Time Limit:</label>
                    <div class="time-options">
                        <label class="time-option" onclick="selectTime(15)">
                            <input type="radio" name="time" value="15">
                            <div class="time-value">15</div>
                            <div class="time-label">minutes</div>
                        </label>
                        <label class="time-option selected" onclick="selectTime(20)">
                            <input type="radio" name="time" value="20" checked>
                            <div class="time-value">20</div>
                            <div class="time-label">minutes</div>
                        </label>
                        <label class="time-option" onclick="selectTime(30)">
                            <input type="radio" name="time" value="30">
                            <div class="time-value">30</div>
                            <div class="time-label">minutes</div>
                        </label>
                    </div>
                </div>

                <button class="start-btn" onclick="startChallenge()">Start Challenge 🚀</button>
                
                <div style="margin-top: 20px; padding-top: 20px; border-top: 2px solid #ddd;">
                    <button class="start-btn" style="background: linear-gradient(135deg, #667eea, #764ba2);" onclick="showInstructorDashboard()">
                        👨‍🏫 Instructor Dashboard
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Game Screen -->
    <div id="gameScreen" class="container hidden">
        <div class="timer-bar" id="timerBar">
            <div>
                <span id="playerNameDisplay"></span>
            </div>
            <div class="timer-display">
                ⏱️ <span id="timerDisplay">20:00</span>
            </div>
        </div>

        <div class="header">
            <div class="header-left">
                <h1>📊 Sensitivity Analysis</h1>
            </div>
            <div class="player-info">
                <div class="player-score">Score: <span id="scoreDisplay">0</span> / 15</div>
            </div>
        </div>

        <div class="nav-tabs">
            <button class="tab active" onclick="showScenario(1)">Scenario 1: Production</button>
            <button class="tab" onclick="showScenario(2)">Scenario 2: Investment</button>
            <button class="tab" onclick="showScenario(3)">Scenario 3: Blending</button>
        </div>

        <div class="content">
            <!-- Scenario 1 -->
            <div class="scenario active" id="scenario1">
                <div class="scenario-header">
                    <h2>Scenario 1: Production Planning Problem</h2>
                    <p>A furniture company produces chairs (x₁) and tables (x₂) to maximize profit. The company has limited resources: labor hours and wood.</p>
                    <p style="margin-top: 10px;"><strong>Objective Function:</strong> Maximize Z = 50x₁ + 80x₂</p>
                    <p><strong>Constraints:</strong></p>
                    <ul style="margin-left: 25px; margin-top: 10px;">
                        <li>Labor: 3x₁ + 5x₂ ≤ 150 hours</li>
                        <li>Wood: 4x₁ + 2x₂ ≤ 120 units</li>
                        <li>x₁, x₂ ≥ 0</li>
                    </ul>
                </div>

                <div class="solver-output">
                    <h3>📋 Excel Solver Output</h3>
                    
                    <h4 style="margin-top: 20px; color: #185a9d;">Variable Cells (Decision Variables):</h4>
                    <table>
                        <tr>
                            <th>Variable</th>
                            <th>Final Value</th>
                            <th>Reduced Cost</th>
                            <th>Objective Coefficient</th>
                            <th>Allowable Increase</th>
                            <th>Allowable Decrease</th>
                        </tr>
                        <tr>
                            <td>x₁ (Chairs)</td>
                            <td>15</td>
                            <td>0</td>
                            <td>50</td>
                            <td>40</td>
                            <td>16.67</td>
                        </tr>
                        <tr>
                            <td>x₂ (Tables)</td>
                            <td>21</td>
                            <td>0</td>
                            <td>80</td>
                            <td>25</td>
                            <td>20</td>
                        </tr>
                    </table>

                    <h4 style="margin-top: 20px; color: #185a9d;">Constraints:</h4>
                    <table>
                        <tr>
                            <th>Constraint</th>
                            <th>Final Value</th>
                            <th>Shadow Price</th>
                            <th>RHS</th>
                            <th>Allowable Increase</th>
                            <th>Allowable Decrease</th>
                        </tr>
                        <tr>
                            <td>Labor</td>
                            <td>150</td>
                            <td>12</td>
                            <td>150</td>
                            <td>30</td>
                            <td>50</td>
                        </tr>
                        <tr>
                            <td>Wood</td>
                            <td>102</td>
                            <td>0</td>
                            <td>120</td>
                            <td>1E+30</td>
                            <td>18</td>
                        </tr>
                    </table>
                </div>

                <div class="key-concept">
                    <h4>💡 Key Concepts Review</h4>
                    <ul>
                        <li><strong>Shadow Price:</strong> Additional profit from one more unit of resource (if constraint is binding)</li>
                        <li><strong>Binding Constraint:</strong> Final Value = RHS (resource is fully used)</li>
                        <li><strong>Non-Binding Constraint:</strong> Final Value < RHS (slack/surplus exists)</li>
                        <li><strong>Allowable Increase/Decrease (RHS):</strong> Range where shadow price remains valid</li>
                        <li><strong>Allowable Increase/Decrease (Objective):</strong> Range where optimal solution doesn't change</li>
                    </ul>
                </div>

                <div class="question-section">
                    <div class="question">
                        <div class="question-text">Question 7: Which constraints are binding?</div>
                        <div class="input-group">
                            <label>Select all that apply (type constraint names separated by commas)</label>
                            <input type="text" id="s2q2" placeholder="e.g., Budget, Risk, Min Stock 1">
                        </div>
                    </div>

                    <div class="question">
                        <div class="question-text">Question 8: If you have $1,000 more budget, how much will expected return increase?</div>
                        <div class="input-group">
                            <input type="number" id="s2q3" placeholder="Enter increase amount">
                        </div>
                    </div>

                    <div class="question">
                        <div class="question-text">Question 9: The minimum Stock 1 constraint has a shadow price of -0.02. What does this mean?</div>
                        <div class="radio-group">
                            <div class="radio-option">
                                <input type="radio" name="s2q4" id="s2q4a" value="a">
                                <label for="s2q4a">Increasing the minimum requirement by 1 unit will decrease profit by $0.02</label>
                            </div>
                            <div class="radio-option">
                                <input type="radio" name="s2q4" id="s2q4b" value="b">
                                <label for="s2q4b">Increasing the minimum requirement by 1 unit will increase profit by $0.02</label>
                            </div>
                            <div class="radio-option">
                                <input type="radio" name="s2q4" id="s2q4c" value="c">
                                <label for="s2q4c">The constraint is non-binding</label>
                            </div>
                        </div>
                    </div>

                    <div class="question">
                        <div class="question-text">Question 10: If the return on Stock 2 changes from 12% to 14%, will the optimal solution change?</div>
                        <div class="radio-group">
                            <div class="radio-option">
                                <input type="radio" name="s2q5" id="s2q5a" value="yes">
                                <label for="s2q5a">No, it's within the allowable range (0.12 - 0.03 to 0.12 + 0.04)</label>
                            </div>
                            <div class="radio-option">
                                <input type="radio" name="s2q5" id="s2q5b" value="no">
                                <label for="s2q5b">Yes, it exceeds the allowable range</label>
                            </div>
                        </div>
                    </div>

                    <button class="check-btn" onclick="checkScenario2()">Check Answers</button>
                    <div class="feedback" id="feedback2"></div>
                </div>
            </div>

            <!-- Scenario 3 -->
            <div class="scenario" id="scenario3">
                <div class="scenario-header">
                    <h2>Scenario 3: Product Blending Problem</h2>
                    <p>A company blends three ingredients (x₁, x₂, x₃) to create a product while minimizing cost and meeting quality requirements.</p>
                    <p style="margin-top: 10px;"><strong>Objective Function:</strong> Minimize Z = 20x₁ + 30x₂ + 25x₃</p>
                    <p><strong>Constraints:</strong></p>
                    <ul style="margin-left: 25px; margin-top: 10px;">
                        <li>Total quantity: x₁ + x₂ + x₃ ≥ 100</li>
                        <li>Quality: 0.8x₁ + 0.6x₂ + 0.9x₃ ≥ 75</li>
                        <li>Max Ingredient 1: x₁ ≤ 50</li>
                    </ul>
                </div>

                <div class="solver-output">
                    <h3>📋 Excel Solver Output</h3>
                    
                    <h4 style="margin-top: 20px; color: #185a9d;">Variable Cells:</h4>
                    <table>
                        <tr>
                            <th>Variable</th>
                            <th>Final Value</th>
                            <th>Reduced Cost</th>
                            <th>Objective Coefficient</th>
                            <th>Allowable Increase</th>
                            <th>Allowable Decrease</th>
                        </tr>
                        <tr>
                            <td>x₁ (Ingredient 1)</td>
                            <td>37.5</td>
                            <td>0</td>
                            <td>20</td>
                            <td>15</td>
                            <td>10</td>
                        </tr>
                        <tr>
                            <td>x₂ (Ingredient 2)</td>
                            <td>0</td>
                            <td>5</td>
                            <td>30</td>
                            <td>1E+30</td>
                            <td>5</td>
                        </tr>
                        <tr>
                            <td>x₃ (Ingredient 3)</td>
                            <td>62.5</td>
                            <td>0</td>
                            <td>25</td>
                            <td>10</td>
                            <td>15</td>
                        </tr>
                    </table>

                    <h4 style="margin-top: 20px; color: #185a9d;">Constraints:</h4>
                    <table>
                        <tr>
                            <th>Constraint</th>
                            <th>Final Value</th>
                            <th>Shadow Price</th>
                            <th>RHS</th>
                            <th>Allowable Increase</th>
                            <th>Allowable Decrease</th>
                        </tr>
                        <tr>
                            <td>Total Quantity</td>
                            <td>100</td>
                            <td>-22.5</td>
                            <td>100</td>
                            <td>25</td>
                            <td>37.5</td>
                        </tr>
                        <tr>
                            <td>Quality</td>
                            <td>86.25</td>
                            <td>0</td>
                            <td>75</td>
                            <td>1E+30</td>
                            <td>11.25</td>
                        </tr>
                        <tr>
                            <td>Max Ingredient 1</td>
                            <td>37.5</td>
                            <td>0</td>
                            <td>50</td>
                            <td>1E+30</td>
                            <td>12.5</td>
                        </tr>
                    </table>
                </div>

                <div class="question-section">
                    <div class="question">
                        <div class="question-text">Question 11: What is the optimal cost?</div>
                        <div class="input-group">
                            <input type="number" id="s3q1" placeholder="Enter cost value">
                        </div>
                    </div>

                    <div class="question">
                        <div class="question-text">Question 12: Why is x₂ (Ingredient 2) equal to zero in the optimal solution?</div>
                        <div class="radio-group">
                            <div class="radio-option">
                                <input type="radio" name="s3q2" id="s3q2a" value="a">
                                <label for="s3q2a">It has a positive reduced cost of $5, making it uneconomical to use</label>
                            </div>
                            <div class="radio-option">
                                <input type="radio" name="s3q2" id="s3q2b" value="b">
                                <label for="s3q2b">It has a reduced cost of zero</label>
                            </div>
                            <div class="radio-option">
                                <input type="radio" name="s3q2" id="s3q2c" value="c">
                                <label for="s3q2c">The constraint is binding</label>
                            </div>
                        </div>
                    </div>

                    <div class="question">
                        <div class="question-text">Question 13: The Total Quantity constraint has a shadow price of -22.5. If we reduce the requirement from 100 to 95 units, what happens to cost?</div>
                        <div class="input-group">
                            <label>Calculate the cost change</label>
                            <input type="number" id="s3q3" placeholder="Enter cost change (use negative for decrease)">
                        </div>
                    </div>

                    <div class="question">
                        <div class="question-text">Question 14: How much surplus does the Quality constraint have?</div>
                        <div class="input-group">
                            <input type="number" id="s3q4" placeholder="Enter surplus value">
                        </div>
                    </div>

                    <div class="question">
                        <div class="question-text">Question 15: If the cost of Ingredient 1 increases from $20 to $32, will the optimal solution change?</div>
                        <div class="radio-group">
                            <div class="radio-option">
                                <input type="radio" name="s3q5" id="s3q5a" value="yes">
                                <label for="s3q5a">Yes, it exceeds the allowable increase of $15</label>
                            </div>
                            <div class="radio-option">
                                <input type="radio" name="s3q5" id="s3q5b" value="no">
                                <label for="s3q5b">No, it's within the allowable range</label>
                            </div>
                        </div>
                    </div>

                    <button class="check-btn" onclick="checkScenario3()">Check Answers</button>
                    <div class="feedback" id="feedback3"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- Leaderboard Screen -->
    <div id="leaderboardScreen" class="container hidden">
        <div class="leaderboard-screen">
            <div class="leaderboard-header">
                <h1>🏆 Leaderboard 🏆</h1>
                <p>Top performers in Sensitivity Analysis Challenge</p>
            </div>

            <div class="leaderboard-table">
                <table>
                    <thead>
                        <tr>
                            <th>Rank</th>
                            <th>Name</th>
                            <th>Score</th>
                            <th>Time</th>
                            <th>Completion</th>
                        </tr>
                    </thead>
                    <tbody id="leaderboardBody">
                    </tbody>
                </table>
            </div>

            <button class="restart-btn" onclick="restartChallenge()">Start New Challenge</button>
        </div>
    </div>

    <!-- Instructor Dashboard -->
    <div id="instructorDashboard" class="container hidden">
        <div class="leaderboard-screen">
            <div class="leaderboard-header" style="background: linear-gradient(135deg, #667eea, #764ba2); color: white; padding: 30px; border-radius: 15px; margin-bottom: 30px;">
                <h1>👨‍🏫 Instructor Dashboard</h1>
                <p>View and manage student performance</p>
            </div>

            <!-- Statistics Cards -->
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 30px;">
                <div style="background: linear-gradient(135deg, #667eea, #764ba2); color: white; padding: 25px; border-radius: 15px; text-align: center; box-shadow: 0 5px 15px rgba(0,0,0,0.2);">
                    <div style="font-size: 2.5rem; font-weight: bold;" id="totalStudents">0</div>
                    <div style="font-size: 1rem; opacity: 0.9;">Total Attempts</div>
                </div>
                <div style="background: linear-gradient(135deg, #43cea2, #185a9d); color: white; padding: 25px; border-radius: 15px; text-align: center; box-shadow: 0 5px 15px rgba(0,0,0,0.2);">
                    <div style="font-size: 2.5rem; font-weight: bold;" id="avgScore">0</div>
                    <div style="font-size: 1rem; opacity: 0.9;">Average Score</div>
                </div>
                <div style="background: linear-gradient(135deg, #f093fb, #f5576c); color: white; padding: 25px; border-radius: 15px; text-align: center; box-shadow: 0 5px 15px rgba(0,0,0,0.2);">
                    <div style="font-size: 2.5rem; font-weight: bold;" id="avgTime">0:00</div>
                    <div style="font-size: 1rem; opacity: 0.9;">Average Time</div>
                </div>
                <div style="background: linear-gradient(135deg, #fa709a, #fee140); color: white; padding: 25px; border-radius: 15px; text-align: center; box-shadow: 0 5px 15px rgba(0,0,0,0.2);">
                    <div style="font-size: 2.5rem; font-weight: bold;" id="perfectScores">0</div>
                    <div style="font-size: 1rem; opacity: 0.9;">Perfect Scores</div>
                </div>
            </div>

            <!-- Action Buttons -->
            <div style="display: flex; gap: 15px; margin-bottom: 30px; flex-wrap: wrap;">
                <button class="check-btn" onclick="exportLeaderboard()" style="background: linear-gradient(135deg, #667eea, #764ba2);">
                    📥 Export to CSV
                </button>
                <button class="check-btn" onclick="printLeaderboard()" style="background: linear-gradient(135deg, #43cea2, #185a9d);">
                    🖨️ Print Leaderboard
                </button>
                <button class="check-btn" onclick="confirmClearLeaderboard()" style="background: linear-gradient(135deg, #f5576c, #f093fb);">
                    🗑️ Clear All Data
                </button>
                <button class="check-btn" onclick="refreshDashboard()" style="background: linear-gradient(135deg, #4facfe, #00f2fe);">
                    🔄 Refresh
                </button>
            </div>

            <!-- Leaderboard Table -->
            <div class="leaderboard-table">
                <table id="instructorTable">
                    <thead>
                        <tr>
                            <th>Rank</th>
                            <th>Name</th>
                            <th>Score</th>
                            <th>Time</th>
                            <th>Completion %</th>
                            <th>Date/Time</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="instructorLeaderboardBody">
                    </tbody>
                </table>
            </div>

            <button class="restart-btn" onclick="backToStart()">← Back to Start</button>
        </div>
    </div>

    <script>
        let playerName = '';
        let timeLimit = 20; // minutes
        let timeRemaining = 0; // seconds
        let timerInterval = null;
        let totalScore = 0;
        let startTime = null;
        let endTime = null;

        function selectTime(minutes) {
            timeLimit = minutes;
            document.querySelectorAll('.time-option').forEach(opt => opt.classList.remove('selected'));
            event.currentTarget.classList.add('selected');
        }

        function startChallenge() {
            playerName = document.getElementById('playerName').value.trim();
            
            if (!playerName) {
                alert('Please enter your name!');
                return;
            }

            // Hide start screen, show game screen
            document.getElementById('startScreen').classList.add('hidden');
            document.getElementById('gameScreen').classList.remove('hidden');

            // Set up game
            document.getElementById('playerNameDisplay').textContent = playerName;
            timeRemaining = timeLimit * 60; // convert to seconds
            startTime = Date.now();

            // Start timer
            updateTimerDisplay();
            timerInterval = setInterval(() => {
                timeRemaining--;
                updateTimerDisplay();

                if (timeRemaining <= 0) {
                    endChallenge();
                }
            }, 1000);
        }

        function updateTimerDisplay() {
            const minutes = Math.floor(timeRemaining / 60);
            const seconds = timeRemaining % 60;
            const display = `${minutes}:${seconds.toString().padStart(2, '0')}`;
            document.getElementById('timerDisplay').textContent = display;

            const timerBar = document.getElementById('timerBar');
            if (timeRemaining <= 60) {
                timerBar.className = 'timer-bar danger';
            } else if (timeRemaining <= 180) {
                timerBar.className = 'timer-bar warning';
            } else {
                timerBar.className = 'timer-bar';
            }
        }

        function endChallenge() {
            clearInterval(timerInterval);
            endTime = Date.now();
            
            const totalTime = Math.floor((endTime - startTime) / 1000);
            saveToLeaderboard(playerName, totalScore, totalTime);
            showLeaderboard();
        }

        function saveToLeaderboard(name, score, time) {
            let leaderboard = JSON.parse(localStorage.getItem('lpLeaderboard') || '[]');
            
            leaderboard.push({
                name: name,
                score: score,
                time: time,
                timestamp: Date.now()
            });

            // Sort by score (descending), then by time (ascending)
            leaderboard.sort((a, b) => {
                if (b.score !== a.score) {
                    return b.score - a.score;
                }
                return a.time - b.time;
            });

            localStorage.setItem('lpLeaderboard', JSON.stringify(leaderboard));
        }

        function showLeaderboard() {
            document.getElementById('gameScreen').classList.add('hidden');
            document.getElementById('leaderboardScreen').classList.remove('hidden');

            const leaderboard = JSON.parse(localStorage.getItem('lpLeaderboard') || '[]');
            const tbody = document.getElementById('leaderboardBody');
            tbody.innerHTML = '';

            leaderboard.forEach((entry, index) => {
                const row = document.createElement('tr');
                const isCurrentPlayer = entry.name === playerName && 
                    Math.abs(entry.timestamp - endTime) < 1000;
                
                if (isCurrentPlayer) {
                    row.className = 'current-player';
                }

                const rankCell = document.createElement('td');
                rankCell.className = 'rank-cell';
                
                if (index === 0) {
                    rankCell.innerHTML = '<span class="rank-medal">🥇</span><span class="rank-1">#1</span>';
                } else if (index === 1) {
                    rankCell.innerHTML = '<span class="rank-medal">🥈</span><span class="rank-2">#2</span>';
                } else if (index === 2) {
                    rankCell.innerHTML = '<span class="rank-medal">🥉</span><span class="rank-3">#3</span>';
                } else {
                    rankCell.textContent = `#${index + 1}`;
                }

                const nameCell = document.createElement('td');
                nameCell.textContent = entry.name + (isCurrentPlayer ? ' (You)' : '');

                const scoreCell = document.createElement('td');
                scoreCell.textContent = `${entry.score} / 15`;

                const timeCell = document.createElement('td');
                const mins = Math.floor(entry.time / 60);
                const secs = entry.time % 60;
                timeCell.textContent = `${mins}:${secs.toString().padStart(2, '0')}`;

                const completionCell = document.createElement('td');
                const percentage = Math.round((entry.score / 15) * 100);
                completionCell.textContent = `${percentage}%`;

                row.appendChild(rankCell);
                row.appendChild(nameCell);
                row.appendChild(scoreCell);
                row.appendChild(timeCell);
                row.appendChild(completionCell);

                tbody.appendChild(row);
            });
        }

        function restartChallenge() {
            // Reset everything
            totalScore = 0;
            timeRemaining = 0;
            startTime = null;
            endTime = null;
            
            // Clear all inputs
            document.querySelectorAll('input[type="number"], input[type="text"]').forEach(input => {
                input.value = '';
                input.classList.remove('correct', 'incorrect');
            });
            document.querySelectorAll('input[type="radio"]').forEach(radio => {
                radio.checked = false;
            });
            document.querySelectorAll('.feedback').forEach(fb => {
                fb.classList.remove('show');
            });

            // Show start screen
            document.getElementById('leaderboardScreen').classList.add('hidden');
            document.getElementById('startScreen').classList.remove('hidden');
            
            // Reset name input
            document.getElementById('playerName').value = '';
        }

        function showInstructorDashboard() {
            document.getElementById('startScreen').classList.add('hidden');
            document.getElementById('instructorDashboard').classList.remove('hidden');
            loadInstructorDashboard();
        }

        function loadInstructorDashboard() {
            const leaderboard = JSON.parse(localStorage.getItem('lpLeaderboard') || '[]');
            
            // Calculate statistics
            const totalAttempts = leaderboard.length;
            const avgScore = totalAttempts > 0 
                ? (leaderboard.reduce((sum, entry) => sum + entry.score, 0) / totalAttempts).toFixed(1)
                : 0;
            const avgTime = totalAttempts > 0
                ? Math.floor(leaderboard.reduce((sum, entry) => sum + entry.time, 0) / totalAttempts)
                : 0;
            const perfectScores = leaderboard.filter(entry => entry.score === 15).length;

            // Update statistics
            document.getElementById('totalStudents').textContent = totalAttempts;
            document.getElementById('avgScore').textContent = `${avgScore}/15`;
            const avgMins = Math.floor(avgTime / 60);
            const avgSecs = avgTime % 60;
            document.getElementById('avgTime').textContent = `${avgMins}:${avgSecs.toString().padStart(2, '0')}`;
            document.getElementById('perfectScores').textContent = perfectScores;

            // Populate table
            const tbody = document.getElementById('instructorLeaderboardBody');
            tbody.innerHTML = '';

            leaderboard.forEach((entry, index) => {
                const row = document.createElement('tr');

                const rankCell = document.createElement('td');
                rankCell.className = 'rank-cell';
                
                if (index === 0) {
                    rankCell.innerHTML = '<span class="rank-medal">🥇</span><span class="rank-1">#1</span>';
                } else if (index === 1) {
                    rankCell.innerHTML = '<span class="rank-medal">🥈</span><span class="rank-2">#2</span>';
                } else if (index === 2) {
                    rankCell.innerHTML = '<span class="rank-medal">🥉</span><span class="rank-3">#3</span>';
                } else {
                    rankCell.textContent = `#${index + 1}`;
                }

                const nameCell = document.createElement('td');
                nameCell.textContent = entry.name;

                const scoreCell = document.createElement('td');
                scoreCell.textContent = `${entry.score} / 15`;
                if (entry.score === 15) {
                    scoreCell.style.fontWeight = 'bold';
                    scoreCell.style.color = '#4caf50';
                }

                const timeCell = document.createElement('td');
                const mins = Math.floor(entry.time / 60);
                const secs = entry.time % 60;
                timeCell.textContent = `${mins}:${secs.toString().padStart(2, '0')}`;

                const completionCell = document.createElement('td');
                const percentage = Math.round((entry.score / 15) * 100);
                completionCell.textContent = `${percentage}%`;
                
                if (percentage === 100) {
                    completionCell.style.fontWeight = 'bold';
                    completionCell.style.color = '#4caf50';
                } else if (percentage >= 80) {
                    completionCell.style.color = '#ff9800';
                }

                const dateCell = document.createElement('td');
                const date = new Date(entry.timestamp);
                dateCell.textContent = date.toLocaleString();
                dateCell.style.fontSize = '0.9rem';

                const actionCell = document.createElement('td');
                const deleteBtn = document.createElement('button');
                deleteBtn.textContent = '🗑️';
                deleteBtn.style.cssText = 'background: #f44336; color: white; border: none; padding: 8px 12px; border-radius: 5px; cursor: pointer; font-size: 1rem;';
                deleteBtn.onclick = () => deleteEntry(index);
                actionCell.appendChild(deleteBtn);

                row.appendChild(rankCell);
                row.appendChild(nameCell);
                row.appendChild(scoreCell);
                row.appendChild(timeCell);
                row.appendChild(completionCell);
                row.appendChild(dateCell);
                row.appendChild(actionCell);

                tbody.appendChild(row);
            });
        }

        function deleteEntry(index) {
            if (confirm('Are you sure you want to delete this entry?')) {
                let leaderboard = JSON.parse(localStorage.getItem('lpLeaderboard') || '[]');
                leaderboard.splice(index, 1);
                localStorage.setItem('lpLeaderboard', JSON.stringify(leaderboard));
                loadInstructorDashboard();
            }
        }

        function exportLeaderboard() {
            const leaderboard = JSON.parse(localStorage.getItem('lpLeaderboard') || '[]');
            
            if (leaderboard.length === 0) {
                alert('No data to export!');
                return;
            }

            let csv = 'Rank,Name,Score,Time (seconds),Completion %,Date/Time\n';
            
            leaderboard.forEach((entry, index) => {
                const percentage = Math.round((entry.score / 15) * 100);
                const date = new Date(entry.timestamp).toLocaleString();
                csv += `${index + 1},"${entry.name}",${entry.score},${entry.time},${percentage}%,"${date}"\n`;
            });

            const blob = new Blob([csv], { type: 'text/csv' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `leaderboard_${new Date().toISOString().split('T')[0]}.csv`;
            a.click();
            window.URL.revokeObjectURL(url);
        }

        function printLeaderboard() {
            const printWindow = window.open('', '', 'height=600,width=800');
            const leaderboard = JSON.parse(localStorage.getItem('lpLeaderboard') || '[]');
            
            let html = `
                <html>
                <head>
                    <title>Leaderboard - Sensitivity Analysis Challenge</title>
                    <style>
                        body { font-family: Arial, sans-serif; padding: 20px; }
                        h1 { color: #185a9d; text-align: center; }
                        table { width: 100%; border-collapse: collapse; margin-top: 20px; }
                        th, td { border: 1px solid #ddd; padding: 12px; text-align: left; }
                        th { background: #185a9d; color: white; }
                        tr:nth-child(even) { background: #f8f9fa; }
                        .date { text-align: center; margin-top: 20px; color: #666; }
                    </style>
                </head>
                <body>
                    <h1>🏆 Sensitivity Analysis Challenge - Leaderboard</h1>
                    <table>
                        <tr>
                            <th>Rank</th>
                            <th>Name</th>
                            <th>Score</th>
                            <th>Time</th>
                            <th>Completion %</th>
                            <th>Date/Time</th>
                        </tr>
            `;

            leaderboard.forEach((entry, index) => {
                const mins = Math.floor(entry.time / 60);
                const secs = entry.time % 60;
                const percentage = Math.round((entry.score / 15) * 100);
                const date = new Date(entry.timestamp).toLocaleString();
                
                let medal = '';
                if (index === 0) medal = '🥇';
                else if (index === 1) medal = '🥈';
                else if (index === 2) medal = '🥉';
                
                html += `
                    <tr>
                        <td>${medal} #${index + 1}</td>
                        <td>${entry.name}</td>
                        <td>${entry.score} / 15</td>
                        <td>${mins}:${secs.toString().padStart(2, '0')}</td>
                        <td>${percentage}%</td>
                        <td>${date}</td>
                    </tr>
                `;
            });

            html += `
                    </table>
                    <div class="date">Generated on: ${new Date().toLocaleString()}</div>
                </body>
                </html>
            `;

            printWindow.document.write(html);
            printWindow.document.close();
            printWindow.print();
        }

        function confirmClearLeaderboard() {
            if (confirm('⚠️ WARNING: This will delete ALL student data permanently. Are you sure?')) {
                if (confirm('This action cannot be undone. Click OK to proceed.')) {
                    localStorage.removeItem('lpLeaderboard');
                    loadInstructorDashboard();
                    alert('✓ All data has been cleared.');
                }
            }
        }

        function refreshDashboard() {
            loadInstructorDashboard();
        }

        function backToStart() {
            document.getElementById('instructorDashboard').classList.add('hidden');
            document.getElementById('startScreen').classList.remove('hidden');
        }

        function showScenario(num) {
            document.querySelectorAll('.scenario').forEach(s => s.classList.remove('active'));
            document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
            
            document.getElementById('scenario' + num).classList.add('active');
            document.querySelectorAll('.tab')[num - 1].classList.add('active');
        }

        function checkScenario1() {
            let score = 0;

            const q1 = parseFloat(document.getElementById('s1q1').value);
            if (q1 === 2430) {
                score++;
                document.getElementById('s1q1').classList.add('correct');
                document.getElementById('s1q1').classList.remove('incorrect');
            } else {
                document.getElementById('s1q1').classList.add('incorrect');
                document.getElementById('s1q1').classList.remove('correct');
            }

            const q2 = document.querySelector('input[name="s1q2"]:checked');
            if (q2 && q2.value === 'binding') {
                score++;
            }

            const q3 = parseFloat(document.getElementById('s1q3').value);
            if (q3 === 18) {
                score++;
                document.getElementById('s1q3').classList.add('correct');
                document.getElementById('s1q3').classList.remove('incorrect');
            } else {
                document.getElementById('s1q3').classList.add('incorrect');
                document.getElementById('s1q3').classList.remove('correct');
            }

            const q4 = parseFloat(document.getElementById('s1q4').value);
            if (q4 === 12) {
                score++;
                document.getElementById('s1q4').classList.add('correct');
                document.getElementById('s1q4').classList.remove('incorrect');
            } else {
                document.getElementById('s1q4').classList.add('incorrect');
                document.getElementById('s1q4').classList.remove('correct');
            }

            const q5 = document.querySelector('input[name="s1q5"]:checked');
            if (q5 && q5.value === 'yes') {
                score++;
            }

            totalScore += score;
            document.getElementById('scoreDisplay').textContent = totalScore;

            const feedbackDiv = document.getElementById('feedback1');
            feedbackDiv.classList.add('show');
            
            if (score === 5) {
                feedbackDiv.className = 'feedback show correct';
                feedbackDiv.innerHTML = '<h4>✓ Perfect! All answers correct! +5 points</h4>';
            } else if (score >= 3) {
                feedbackDiv.className = 'feedback show partial';
                feedbackDiv.innerHTML = `<h4>Good work! ${score}/5 correct. +${score} points</h4>`;
            } else {
                feedbackDiv.className = 'feedback show incorrect';
                feedbackDiv.innerHTML = `<h4>Keep trying! ${score}/5 correct. +${score} points</h4>`;
            }
        }

        function checkScenario2() {
            let score = 0;

            const q1 = parseFloat(document.getElementById('s2q1').value);
            if (q1 === 12100) {
                score++;
                document.getElementById('s2q1').classList.add('correct');
                document.getElementById('s2q1').classList.remove('incorrect');
            } else {
                document.getElementById('s2q1').classList.add('incorrect');
                document.getElementById('s2q1').classList.remove('correct');
            }

            const q2 = document.getElementById('s2q2').value.toLowerCase();
            if ((q2.includes('budget') && q2.includes('risk') && q2.includes('min stock 1')) ||
                (q2.includes('budget') && q2.includes('risk') && q2.includes('stock'))) {
                score++;
                document.getElementById('s2q2').classList.add('correct');
                document.getElementById('s2q2').classList.remove('incorrect');
            } else {
                document.getElementById('s2q2').classList.add('incorrect');
                document.getElementById('s2q2').classList.remove('correct');
            }

            const q3 = parseFloat(document.getElementById('s2q3').value);
            if (q3 === 130) {
                score++;
                document.getElementById('s2q3').classList.add('correct');
                document.getElementById('s2q3').classList.remove('incorrect');
            } else {
                document.getElementById('s2q3').classList.add('incorrect');
                document.getElementById('s2q3').classList.remove('correct');
            }

            const q4 = document.querySelector('input[name="s2q4"]:checked');
            if (q4 && q4.value === 'a') {
                score++;
            }

            const q5 = document.querySelector('input[name="s2q5"]:checked');
            if (q5 && q5.value === 'yes') {
                score++;
            }

            totalScore += score;
            document.getElementById('scoreDisplay').textContent = totalScore;

            const feedbackDiv = document.getElementById('feedback2');
            feedbackDiv.classList.add('show');
            
            if (score === 5) {
                feedbackDiv.className = 'feedback show correct';
                feedbackDiv.innerHTML = '<h4>✓ Excellent! All answers correct! +5 points</h4>';
            } else if (score >= 3) {
                feedbackDiv.className = 'feedback show partial';
                feedbackDiv.innerHTML = `<h4>Good effort! ${score}/5 correct. +${score} points</h4>`;
            } else {
                feedbackDiv.className = 'feedback show incorrect';
                feedbackDiv.innerHTML = `<h4>Keep learning! ${score}/5 correct. +${score} points</h4>`;
            }
        }

        function checkScenario3() {
            let score = 0;

            const q1 = parseFloat(document.getElementById('s3q1').value);
            if (q1 === 2312.5) {
                score++;
                document.getElementById('s3q1').classList.add('correct');
                document.getElementById('s3q1').classList.remove('incorrect');
            } else {
                document.getElementById('s3q1').classList.add('incorrect');
                document.getElementById('s3q1').classList.remove('correct');
            }

            const q2 = document.querySelector('input[name="s3q2"]:checked');
            if (q2 && q2.value === 'a') {
                score++;
            }

            const q3 = parseFloat(document.getElementById('s3q3').value);
            if (q3 === -112.5 || q3 === 112.5) {
                score++;
                document.getElementById('s3q3').classList.add('correct');
                document.getElementById('s3q3').classList.remove('incorrect');
            } else {
                document.getElementById('s3q3').classList.add('incorrect');
                document.getElementById('s3q3').classList.remove('correct');
            }

            const q4 = parseFloat(document.getElementById('s3q4').value);
            if (q4 === 11.25) {
                score++;
                document.getElementById('s3q4').classList.add('correct');
                document.getElementById('s3q4').classList.remove('incorrect');
            } else {
                document.getElementById('s3q4').classList.add('incorrect');
                document.getElementById('s3q4').classList.remove('correct');
            }

            const q5 = document.querySelector('input[name="s3q5"]:checked');
            if (q5 && q5.value === 'no') {
                score++;
            }

            totalScore += score;
            document.getElementById('scoreDisplay').textContent = totalScore;

            const feedbackDiv = document.getElementById('feedback3');
            feedbackDiv.classList.add('show');
            
            if (score === 5) {
                feedbackDiv.className = 'feedback show correct';
                feedbackDiv.innerHTML = '<h4>✓ Outstanding! All answers correct! +5 points</h4><p>Challenge complete! Timer will continue until time expires.</p>';
            } else if (score >= 3) {
                feedbackDiv.className = 'feedback show partial';
                feedbackDiv.innerHTML = `<h4>Well done! ${score}/5 correct. +${score} points</h4>`;
            } else {
                feedbackDiv.className = 'feedback show incorrect';
                feedbackDiv.innerHTML = `<h4>Keep practicing! ${score}/5 correct. +${score} points</h4>`;
            }
        }
    </script>
</body>
</html><div class="question-text">Question 1: What is the optimal profit?</div>
                        <div class="input-group">
                            <label>Calculate: Z = 50x₁ + 80x₂</label>
                            <input type="number" id="s1q1" placeholder="Enter profit value">
                        </div>
                    </div>

                    <div class="question">
                        <div class="question-text">Question 2: Is the Labor constraint binding or non-binding?</div>
                        <div class="radio-group">
                            <div class="radio-option">
                                <input type="radio" name="s1q2" id="s1q2a" value="binding">
                                <label for="s1q2a">Binding (resource is fully used)</label>
                            </div>
                            <div class="radio-option">
                                <input type="radio" name="s1q2" id="s1q2b" value="non-binding">
                                <label for="s1q2b">Non-binding (slack/surplus exists)</label>
                            </div>
                        </div>
                    </div>

                    <div class="question">
                        <div class="question-text">Question 3: How much slack does the Wood constraint have?</div>
                        <div class="input-group">
                            <label>Slack = RHS - Final Value</label>
                            <input type="number" id="s1q3" placeholder="Enter slack value">
                        </div>
                    </div>

                    <div class="question">
                        <div class="question-text">Question 4: If we can obtain 1 more labor hour, how much will profit increase?</div>
                        <div class="input-group">
                            <label>Use the shadow price of Labor constraint</label>
                            <input type="number" id="s1q4" placeholder="Enter profit increase">
                        </div>
                    </div>

                    <div class="question">
                        <div class="question-text">Question 5: If labor hours increase to 165, will the shadow price of $12 still be valid?</div>
                        <div class="radio-group">
                            <div class="radio-option">
                                <input type="radio" name="s1q5" id="s1q5a" value="yes">
                                <label for="s1q5a">Yes, it's within the allowable range</label>
                            </div>
                            <div class="radio-option">
                                <input type="radio" name="s1q5" id="s1q5b" value="no">
                                <label for="s1q5b">No, it exceeds the allowable range</label>
                            </div>
                        </div>
                    </div>

                    <button class="check-btn" onclick="checkScenario1()">Check Answers</button>
                    <div class="feedback" id="feedback1"></div>
                </div>
            </div>

            <!-- Scenario 2 -->
            <div class="scenario" id="scenario2">
                <div class="scenario-header">
                    <h2>Scenario 2: Investment Portfolio Problem</h2>
                    <p>An investor allocates funds across three stocks (x₁, x₂, x₃) to maximize expected return while managing risk.</p>
                    <p style="margin-top: 10px;"><strong>Objective Function:</strong> Maximize Z = 0.08x₁ + 0.12x₂ + 0.15x₃</p>
                    <p><strong>Constraints:</strong></p>
                    <ul style="margin-left: 25px; margin-top: 10px;">
                        <li>Budget: x₁ + x₂ + x₃ ≤ 100,000</li>
                        <li>Risk: 3x₁ + 5x₂ + 8x₃ ≤ 550,000</li>
                        <li>Minimum in Stock 1: x₁ ≥ 20,000</li>
                    </ul>
                </div>

                <div class="solver-output">
                    <h3>📋 Excel Solver Output</h3>
                    
                    <h4 style="margin-top: 20px; color: #185a9d;">Variable Cells:</h4>
                    <table>
                        <tr>
                            <th>Variable</th>
                            <th>Final Value</th>
                            <th>Reduced Cost</th>
                            <th>Objective Coefficient</th>
                            <th>Allowable Increase</th>
                            <th>Allowable Decrease</th>
                        </tr>
                        <tr>
                            <td>x₁ (Stock 1)</td>
                            <td>20,000</td>
                            <td>0</td>
                            <td>0.08</td>
                            <td>0.02</td>
                            <td>1E+30</td>
                        </tr>
                        <tr>
                            <td>x₂ (Stock 2)</td>
                            <td>50,000</td>
                            <td>0</td>
                            <td>0.12</td>
                            <td>0.04</td>
                            <td>0.03</td>
                        </tr>
                        <tr>
                            <td>x₃ (Stock 3)</td>
                            <td>30,000</td>
                            <td>0</td>
                            <td>0.15</td>
                            <td>1E+30</td>
                            <td>0.04</td>
                        </tr>
                    </table>

                    <h4 style="margin-top: 20px; color: #185a9d;">Constraints:</h4>
                    <table>
                        <tr>
                            <th>Constraint</th>
                            <th>Final Value</th>
                            <th>Shadow Price</th>
                            <th>RHS</th>
                            <th>Allowable Increase</th>
                            <th>Allowable Decrease</th>
                        </tr>
                        <tr>
                            <td>Budget</td>
                            <td>100,000</td>
                            <td>0.13</td>
                            <td>100,000</td>
                            <td>20,000</td>
                            <td>10,000</td>
                        </tr>
                        <tr>
                            <td>Risk</td>
                            <td>550,000</td>
                            <td>0.01</td>
                            <td>550,000</td>
                            <td>50,000</td>
                            <td>100,000</td>
                        </tr>
                        <tr>
                            <td>Min Stock 1</td>
                            <td>20,000</td>
                            <td>-0.02</td>
                            <td>20,000</td>
                            <td>10,000</td>
                            <td>5,000</td>
                        </tr>
                    </table>
                </div>

                <div class="question-section">
                    <div class="question">
                        <div class="question-text">Question 6: What is the optimal expected return (in dollars)?</div>
                        <div class="input-group">
                            <input type="number" id="s2q1" placeholder="Enter return value">
                        </div>
                    </div>

                    <div class="question">
                        
